(function _testMultipleBindings [:Async async]
    (#if js
            {
                (awaitLet [a (Promise.resolve 1)
                            b (Promise.resolve 2)
                            c (Promise.resolve 3)]
                    (Assert.equals 6 (+ a b c))
                    (async.done))
            }
        {
            (Assert.pass)
            (async.done)
        }))

(function _testRejectedPromise [:Async async]
    (#if js
            {
                (awaitLet [result (Promise.reject "async error")]
                        (catch [reason]
                            (Assert.pass)
                            (async.done))
                    (Assert.fail)
                    (async.done))
            }
        {
            (Assert.pass)
            (async.done)
        }))


(function _testAwaitLetDefaultCatch [:Async async]
    (#if js
            {
                (set Prelude.makeAwaitLetDefaultCatch
                    ->binding
                        ->reason
                            {
                                (Assert.equals "result1" binding)
                                (Assert.equals "rejection without a manually defined catch" reason)
                                (awaitLet [result (Promise.reject "rejection with a manually defined catch")]
                                            (catch [reason]
                                                (Assert.equals "rejection with a manually defined catch" reason)
                                                (async.done))
                                            (Assert.fail)
                                            (async.done))
                            })
                (awaitLet [result1 (Promise.reject "rejection without a manually defined catch")]
                    (Assert.fail)
                    (async.done))
            }
        {
            (Assert.pass)
            (async.done)
        }))